AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Mining Stock Analysis Dashboard

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  
  FinnhubApiKey:
    Type: String
    NoEcho: true
    Description: Finnhub API key

Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: python3.9

Resources:
  # DynamoDB Tables
  SymbolsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub MiningSymbols-${Environment}
      AttributeDefinitions:
        - AttributeName: symbol
          AttributeType: S
        - AttributeName: exchange
          AttributeType: S
      KeySchema:
        - AttributeName: symbol
          KeyType: HASH
        - AttributeName: exchange
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  MetricsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub MiningMetrics-${Environment}
      AttributeDefinitions:
        - AttributeName: symbol
          AttributeType: S
      KeySchema:
        - AttributeName: symbol
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub MiningStockUsers-${Environment}
      AutoVerifiedAttributes: [email]
      UsernameAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  # User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub MiningStockWebClient-${Environment}
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders: [COGNITO]
      CallbackURLs: ["http://localhost:3000"]
      LogoutURLs: ["http://localhost:3000"]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code]
      AllowedOAuthScopes: [email, openid, profile]
      
  WatchlistTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Watchlists-${Environment}
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: symbol
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: symbol
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # Watchlist Lambda Functions
  WatchlistAddFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub WatchlistAdd-${Environment}
      CodeUri: src/watchlist/
      Handler: add.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WatchlistTable
        - Statement:
            - Effect: Allow
              Action: 
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          WATCHLIST_TABLE: !Ref WatchlistTable
          USER_POOL_ID: !Ref UserPool
          COGNITO_REGION: !Ref AWS::Region
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /watchlist
            Method: POST  

  WatchlistGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub WatchlistGet-${Environment}
      CodeUri: src/watchlist/
      Handler: get.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WatchlistTable
        - Statement:
            - Effect: Allow
              Action: 
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          WATCHLIST_TABLE: !Ref WatchlistTable
          USER_POOL_ID: !Ref UserPool
          COGNITO_REGION: !Ref AWS::Region
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /watchlist
            Method: GET

  WatchlistRemoveFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub WatchlistRemove-${Environment}
      CodeUri: src/watchlist/
      Handler: remove.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WatchlistTable
        - Statement:
            - Effect: Allow
              Action: 
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          WATCHLIST_TABLE: !Ref WatchlistTable
          USER_POOL_ID: !Ref UserPool
          COGNITO_REGION: !Ref AWS::Region
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /watchlist
            Method: DELETE

  # Lambda Functions
  SymbolIngestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub SymbolIngest-${Environment}
      CodeUri: src/symbol_ingest/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SymbolsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /mining-app/${Environment}/finnhub-api-key
      Environment:
        Variables:
          SYMBOLS_TABLE: !Ref SymbolsTable
          ENVIRONMENT: !Ref Environment
      Events:
        DailySchedule:
          Type: Schedule
          Properties:
            Schedule: cron(30 14 ? * MON-FRI *)  # 9:30AM EST

  MetricsProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub MetricsProcessor-${Environment}
      CodeUri: src/metrics_processor/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MetricsTable
        - DynamoDBReadPolicy:
            TableName: !Ref SymbolsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub /mining-app/${Environment}/finnhub-api-key
      Environment:
        Variables:
          SYMBOLS_TABLE: !Ref SymbolsTable
          METRICS_TABLE: !Ref MetricsTable
          ENVIRONMENT: !Ref Environment

  DataApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub DataApi-${Environment}
      CodeUri: src/data_api/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SymbolsTable
        - DynamoDBReadPolicy:
            TableName: !Ref MetricsTable
      Environment:
        Variables:
          SYMBOLS_TABLE: !Ref SymbolsTable
          METRICS_TABLE: !Ref MetricsTable
          ENVIRONMENT: !Ref Environment
      Events:
        Api:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY

  # API Gateway
  DashboardApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Environment
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders: "*"
        AllowOrigins: "*"

Outputs:
  DashboardEndpoint:
    Description: API Gateway Endpoint
    Value: !Sub "https://${DashboardApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient